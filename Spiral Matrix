class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
     vector<int> spiral;   
     int r = matrix.size();
     int c = matrix[0].size();

     int traverse = 1;

     int top = 0;
     int bottom = r-1;
     int left = 0;
     int right = c-1;

     while(spiral.size() < r*c ){

         switch(traverse){
             case 1: 
                for(int i = left; i<=right; i++)
                    spiral.push_back(matrix[top][i]);
                top += 1;
                traverse = 2;
                break;

             case 2: 
                 for(int i = top; i<=bottom; i++)
                    spiral.push_back(matrix[i][right]);
                right -= 1;
                traverse = 3;
                break;
             case 3: 
                 for(int i = right; i>=left; i--)
                    spiral.push_back(matrix[bottom][i]);
                bottom -= 1;
                traverse = 4;
                break;
             case 4: 
                 for(int i = bottom; i>=top; i--)
                    spiral.push_back(matrix[i][left]);
                left += 1;
                traverse = 1;
                break;
         }
     }
     return spiral;
    }
};

/* Problem Statement
Given an m x n matrix, return all elements of the matrix in spiral order.
*/
