class Solution {
public:
    int longestPalindrome(string s) {
        unordered_map<char, int> charCount;

        int len = s.length();
        for(int i = 0; i<len; i++){
            charCount[s[i]] += 1;
        }

        unordered_map<char, int> :: iterator itr;
        int maxPalindrome =0;
        int maxOdd = 0;
        bool addedOneOdd = false;
        for(itr = charCount.begin(); itr!=charCount.end(); itr++){
            if(itr->second %2 == 0)
                maxPalindrome += itr->second;
            else if(addedOneOdd){
                maxPalindrome += (itr->second) -1;
            }
            else{
                maxPalindrome += itr->second;
                addedOneOdd = true;
            }
               
        }
       
        return maxPalindrome;
    }
};

/* Problem Statemt
Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.

Letters are case sensitive, for example, "Aa" is not considered a palindrome here.
*/
