/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    void traverse(vector<int>& preOrder, Node* root){
        if(root == nullptr)
            return ;

        preOrder.push_back(root->val);
        
        for(Node* c : root->children){
            traverse(preOrder, c);
        }
    }
    vector<int> preorder(Node* root) {
        vector<int> preOrder;
        traverse(preOrder, root);
        return preOrder;
    }
};

/* Problem statement
Given the root of an n-ary tree, return the preorder traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)
*/
