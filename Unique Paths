class Solution {
public:
    // int traverseBFS(int i, int j, int m, int n){
    //     if(i==m-1 || j==n-1)
    //         return 1;
    //     else
    //         return traverseBFS(i+1, j, m,n) + traverseBFS(i, j+1, m, n);


    // }
    int uniquePaths(int m, int n) {
       // return traverseBFS(0, 0, m, n);
        int s = m*n;
       int memo[m][n];
       for(int i=0;i<m;i++){
           for(int j=0;j<n;j++){
               if(i==m-1 || j==n-1)
                    memo[i][j] = 1;
                else 
                    memo[i][j] = -1;
           }
       }
      // memo[m-1][n-1] = 1;

        for(int i = m-2; i>=0; i--){
            for(int j=n-2; j>=0; j--){
                if(memo[i][j] == -1)
                    memo[i][j] = memo[i+1][j] + memo[i][j+1];
            }
        }

        return memo[0][0];
    }

};

/* Problem Statement
There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.
*/
