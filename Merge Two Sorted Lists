/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* sortedHead;

        if(!list1){
            return list2;
        }
        else if (!list2){
            return list1;
        }

        if(list1->val <= list2->val){
            sortedHead = list1;
            list1 = list1->next;
        }
        else{
            sortedHead = list2;
            list2 = list2->next;
        }

        ListNode* currPtr = sortedHead;

        while(list1 && list2){

            if(list1->val <= list2->val){
                currPtr->next = list1;
                list1 = list1->next;
            }
            else{
                currPtr->next = list2;
                list2 = list2->next;
            }
            currPtr = currPtr->next;
        }
        
        if(!list1)
            currPtr->next = list2;
        else 
            currPtr->next = list1;

        return sortedHead;
        
    }
};

/* Problem Statement
You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

 */
